datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String    @unique
  avatar    String?
  cover    String?
  name    String?
  surname    String?
  description    String?
  city    String?
  school    String?
  work    String?
  website    String?
  createdAt    DateTime @default(now())
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follower[] @relation("Userfollowers")
  followings Follower[] @relation("Userfollowings")
  sender FollowRequest[] @relation("FollowRequestsSent")
  receiver FollowRequest[] @relation("FollowRequestsReceived")
  blocker Block[] @relation("BlocksSent")
  blocked Block[] @relation("BlocksReceived")
  stories Story[]
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  desc    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  likes Like[]
  comments Comment[]
}

model Comment {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  desc    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  likes Like[]
}

model Like {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? @db.ObjectId
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String? @db.ObjectId
}

model Follower {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  follower User @relation("Userfollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String @db.ObjectId
  following User @relation("Userfollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId
}

model FollowRequest {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  sender User @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId
  receiver User @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String @db.ObjectId

  @@unique([senderId, receiverId])
}

model Block {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  blocker User @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String @db.ObjectId
  blocked User @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String @db.ObjectId

  @@unique([blockerId, blockedId])
}

model Story {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  img String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}